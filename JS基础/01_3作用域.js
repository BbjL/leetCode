/* 

1. 理解
  * 就是一块"地盘", 一个代码段所在的区域
  * 它是静态的(相对于上下文对象), 在编写代码时就确定了
2. 分类
  * 全局作用域
  * 函数作用域
  * 没有块作用域(ES6有了)
3. 作用
  * 隔离变量，不同作用域下同名变量不会有冲突


执行上下文和作用域端关系
1. 区别1
  * 全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了。而不是在函数调用时
  * 全局执行上下文环境是在全局作用域确定之后, js代码马上执行之前创建
  * 函数执行上下文是在调用函数时, 函数体代码执行之前创建
2. 区别2
  * 作用域是静态的, 只要函数定义好了就一直存在, 且不会再变化
  * 执行上下文是动态的, 调用函数时创建, 函数调用结束时就会自动释放
3. 联系
  * 执行上下文(对象)是从属于所在的作用域
  * 全局上下文环境==>全局作用域
  * 函数上下文环境==>对应的函数作用域

*/

for (var i = 1; i < 2; i++) {}
for (let i = 1; i < 2; i++) { 
    // 块级别作用域
    // 使用let 变量只在代码块内有效，可以用来动态的添加绑定事件
}
console.log(i);
// console.log(j); undefined



var x = 10;
function fn() {
  console.log(x);
}
function show(f) {
  var x = 20;
  f();   // fn定义时并不是在show下的，因此fn的上一级作用域是window
}
show(fn);
